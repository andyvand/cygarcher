# Copyright 2012 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

if { [skip_shlib_tests] } {
    return 0
}

standard_testfile

set libname $testfile-solib
set srcfile_lib $srcdir/$subdir/$libname.c
set binfile_lib [standard_output_file $libname.so]

set normal_bp "_dl_debug_state"
set probes_bp "dl_main"

if { [gdb_compile_shlib $srcfile_lib $binfile_lib \
	  [list additional_flags=-fPIC]] != "" } {
    untested "Could not compile $binfile_lib."
    return -1
}

if { [prepare_for_testing $testfile.exp $testfile $srcfile \
	  [list additional_flags=-DSHLIB_NAME\=\"$binfile_lib\" libs=-ldl]] } {
    return -1
}

# Run "info sharedlibrary" and check our library is shown the expected
# number of times.
proc check_info_shared { test expect } {
    global libname
    global gdb_prompt

    set actual 0

    gdb_test_multiple "info sharedlibrary" $test {
	-re $libname {
	    incr actual 1
	    exp_continue
	}
	-re "\r\n$gdb_prompt $" {
	    if { $actual == $expect } {
		pass $test
	    } else {
		fail $test
	    }
	}
    }
}

# Enable stop-on-solib-events
gdb_test_no_output "set stop-on-solib-events 1"

# Start the inferior and run to the first stop
gdb_run_cmd
gdb_test "" ".*Stopped due to shared library event.*"

# XFAIL if we are not using probes
set test "ensure using probes"
set using_probes 0
gdb_test_multiple "bt" $test {
    -re "#0 +\[^\r\n\]*\\m(__GI_)?$normal_bp\\M.*$gdb_prompt $" {
	xfail $test
    }
    -re "#0 +\[^\r\n\]*\\m(__GI_)?$probes_bp\\M.*$gdb_prompt $" {
	pass $test
	set using_probes 1
    }
}

if { $using_probes } {
    # Set up breakpoints.
    gdb_test_no_output "set stop-on-solib-events 0"
    gdb_test "break stop" {Breakpoint [0-9]+ at .*}
    gdb_test_no_output "set breakpoint pending on"
    gdb_test "break foo" {Breakpoint [0-9]+ \(foo\) pending\.}

    # Check our library isn't loaded.
    check_info_shared "info sharedlibrary #1" 0

    # Run to the first stop and check our library loaded.
    gdb_test "c" {Breakpoint [0-9]+, .* in stop \(\)}
    check_info_shared "info sharedlibrary #2" 1

    # The next stop should be the function in the library.
    gdb_test "c" {Breakpoint [0-9]+, .* in foo \(\) from .*}

    # Run to the next stop and check our library is now loaded twice.
    gdb_test "c" {Breakpoint [0-9]+, .* in stop \(\)}
    check_info_shared "info sharedlibrary #3" 2

    # The next stop should be the function in the library.
    gdb_test "c" {Breakpoint [0-9]+, .* in foo \(\) from .*}

    # Run to the next stop and check our library is now loaded three
    # times.
    gdb_test "c" {Breakpoint [0-9]+, .* in stop \(\)}
    check_info_shared "info sharedlibrary #4" 3

    # The next stop should be the function in the library.
    gdb_test "c" {Breakpoint [0-9]+, .* in foo \(\) from .*}

    # Run to the next stop and check our library is now loaded twice.
    gdb_test "c" {Breakpoint [0-9]+, .* in stop \(\)}
    check_info_shared "info sharedlibrary #5" 2

    # Run to the next stop and check our library is now loaded once.
    gdb_test "c" {Breakpoint [0-9]+, .* in stop \(\)}
    check_info_shared "info sharedlibrary #6" 1

    # Run to the next stop and check our library is not loaded.
    gdb_test "c" {Breakpoint [0-9]+, .* in stop \(\)}
    check_info_shared "info sharedlibrary #7" 0
}
