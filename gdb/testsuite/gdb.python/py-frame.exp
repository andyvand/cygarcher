# Copyright (C) 2009-2012 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This file is part of the GDB testsuite.  It tests the mechanism
# exposing values to Python.

load_lib gdb-python.exp

standard_testfile

if { [prepare_for_testing ${testfile}.exp ${testfile} ${srcfile}] } {
    return -1
}

# Skip all tests if Python scripting is not enabled.
if { [skip_python_tests] } { continue }

# The following tests require execution.

if ![runto_main] then {
    fail "Can't run to main"
    return 0
}

gdb_breakpoint [gdb_get_line_number "Block break here."]
gdb_continue_to_breakpoint "Block break here."
gdb_py_test_silent_cmd "python bf1 = gdb.selected_frame ()" "get frame" 0

# First test that read_var is unaffected by PR 11036 changes.
gdb_test "python print bf1.read_var(\"i\")" "\"stuff\"" "test i"
gdb_test "python print bf1.read_var(\"f\")" "\"foo\"" "test f"
gdb_test "python print bf1.read_var(\"b\")" "\"bar\"" "test b"

# Test the read_var function in another block other than the current
# block (in this case, the super block). Test thar read_var is reading
# the correct variables of i and f but they are the correct value and type.
gdb_py_test_silent_cmd "python sb = bf1.block().superblock" "get superblock" 0
gdb_test "python print bf1.read_var(\"i\", sb)" "1.1.*" "test i = 1.1"
gdb_test "python print bf1.read_var(\"i\", sb).type" "double" "test double i"
gdb_test "python print bf1.read_var(\"f\", sb)" "2.2.*" "test f = 2.2"
gdb_test "python print bf1.read_var(\"f\", sb).type" "double" "test double f"

# And again test another outerblock, this time testing "i" is the
# correct value and type.
gdb_py_test_silent_cmd "python sb = sb.superblock" "get superblock" 0
gdb_test "python print bf1.read_var(\"i\", sb)" "99" "test i = 99"
gdb_test "python print bf1.read_var(\"i\", sb).type" "int" "test int i"

# Test frame.locals and frame.arg
gdb_py_test_multiple "simple frame print" \
  "python" "" \
  "def print_var (iterator, frame):" "" \
  "   for i in iterator:" "" \
  "      print str(i),\"=\", frame.read_var (i)" "" \
  "end" ""
gdb_py_test_silent_cmd "python fframe = gdb.selected_frame ()" "get frame" 0
gdb_py_test_silent_cmd "python flocals = fframe.locals()" "get locals" 0
gdb_test "python print_var(flocals,fframe)" \
    "i =.*\"stuff\".*f =.*\"foo\".*b =.*\"bar\".*i = 1.1.*f = 2.2.*i = 99.*" \
    "test locals output"
gdb_py_test_silent_cmd "python fargs = fframe.arguments()" "get arguments" 0
gdb_test "python print fargs" "None" "Test arguments, with no arguments"
gdb_test "up" ".*" ""
gdb_py_test_silent_cmd "python fframe = gdb.selected_frame ()" "get frame" 0
gdb_py_test_silent_cmd "python flocals = fframe.locals()" "get locals" 0
gdb_test "python print flocals" "None" "Test locals(), with mo locals"
gdb_py_test_silent_cmd "python fargs = fframe.arguments()" "get arguments" 0
gdb_test "python print_var(fargs,fframe)" \
    "argc = .*argv = .*" \
    "test arguments() output"

gdb_breakpoint "f2"
gdb_continue_to_breakpoint "breakpoint at f2"
gdb_py_test_silent_cmd "python bframe = gdb.selected_frame()" \
    "get bottommost frame" 0
gdb_test "up" ".*" ""

gdb_py_test_silent_cmd "python f1 = gdb.selected_frame ()" "get second frame" 0
gdb_py_test_silent_cmd "python f0 = f1.newer ()" "get first frame" 0

gdb_test "python print f1 == gdb.newest_frame()" False \
    "selected frame -vs- newest frame"
gdb_test "python print bframe == gdb.newest_frame()" True \
    "newest frame -vs- newest frame"

gdb_test "python print 'result =', f0 == f1" " = False" "test equality comparison (false)"
gdb_test "python print 'result =', f0 == f0" " = True" "test equality comparison (true)"
gdb_test "python print 'result =', f0 != f1" " = True" "test inequality comparison (true)"
gdb_test "python print 'result =', f0 != f0" " = False" "test inequality comparison (false)"
gdb_test "python print 'result =', f0.is_valid ()" " = True" "test Frame.is_valid"
gdb_test "python print 'result =', f0.name ()" " = f2" "test Frame.name"
gdb_test "python print 'result =', f0.type () == gdb.NORMAL_FRAME" " = True" "test Frame.type"
gdb_test "python print 'result =', f0.unwind_stop_reason () == gdb.FRAME_UNWIND_NO_REASON" " = True" "test Frame.type"
gdb_test "python print 'result =', gdb.frame_stop_reason_string (gdb.FRAME_UNWIND_INNER_ID)" " = previous frame inner to this frame \\(corrupt stack\\?\\)" "test gdb.frame_stop_reason_string"
gdb_test "python print 'result =', f0.pc ()" " = \[0-9\]+" "test Frame.pc"
gdb_test "python print 'result =', f0.older () == f1" " = True" "test Frame.older"
gdb_test "python print 'result =', f1.newer () == f0" " = True" "test Frame.newer"
gdb_test "python print 'result =', f0.read_var ('variable_which_surely_doesnt_exist')" \
  "ValueError: Variable 'variable_which_surely_doesnt_exist' not found.*Error while executing Python code." \
  "test Frame.read_var - error"
gdb_test "python print 'result =', f0.read_var ('a')" " = 1" "test Frame.read_var - success"

gdb_test "python print 'result =', gdb.selected_frame () == f1" " = True" "test gdb.selected_frame"

# Test FrameIterator.  This tests both the inbuilt iterator, and the
# seperate class.
gdb_breakpoint "f3"
gdb_continue_to_breakpoint "breakpoint at f3"
gdb_py_test_silent_cmd "python it = gdb.FrameIterator (gdb.newest_frame())" \
    "get iterator from newest frame" 0
gdb_py_test_multiple "simple frame print" \
  "python" "" \
  "def print_function (iterator):" "" \
  "   for i in iterator:" "" \
  "      print str(i.function())" "" \
  "end" ""
gdb_test "python print_function(it)" \
    "f3.*f2.*f1.*main.*" "test vanilla frame iterator"
gdb_test "python print_function(gdb.newest_frame())" \
    "f3.*f2.*f1.*main.*" "test vanilla inbuilt frame iterator"
gdb_test "select 3" ".*" ""
gdb_py_test_silent_cmd "python it = gdb.FrameIterator (gdb.selected_frame(), reverse=True)" \
    "get iterator from selected frame" 0
gdb_test "python print_function(it)" \
    "main.*f1.*f2.*f3.*" "test reverse traversal vanilla frame iterator"
gdb_py_test_silent_cmd "python it = gdb.FrameIterator(gdb.newest_frame(), regex=\"f\[0-9\]\")" \
    "get iterator from newest frame" 0
gdb_test "python print_function(it)" \
    "f3.*f2.*f1.*" "test traversal with a regex filtered iterator"
gdb_py_test_silent_cmd "python it = gdb.FrameIterator(gdb.selected_frame(), regex=\"f\[0-9\]\", reverse=True)" \
    "get iterator from newest frame" 0
gdb_test "python print_function(it)" \
    "f1.*f2.*f3.*" "test reverse traversal with a regex filtered iterator"
gdb_py_test_silent_cmd "python it = gdb.FrameIterator(gdb.selected_frame(), regex=\"nothing\")" \
    "get iterator from newest frame" 0
gdb_test "python print_function(it)" \
    "" "test regex iterator that returns nothing"
gdb_test  "python ite = gdb.FrameIterator(gdb.selected_frame(), regex=\"\[\")" \
    "Traceback.*Invalid regex.*Invalid regular expression.*" "test invalid regex"
gdb_test "python print ite" \
    ".*NameError.*name.*ite.*is not defined.*" \
    "test invalid iterator did not return an iterator"
