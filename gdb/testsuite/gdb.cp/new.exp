# Copyright 2012, 2013 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


if { [skip_stl_tests] } { continue }

set testfile "new"
set srcfile ${testfile}.cc
set binfile $objdir/$subdir/$testfile

if {[prepare_for_testing $testfile.exp $testfile $srcfile {debug c++}]} {
    return -1
}

if ![runto_main] then {
    perror "couldn't run to main"
    continue
} 

gdb_breakpoint [gdb_get_line_number "Stop here"]
gdb_continue_to_breakpoint Stop

proc check_op {name value {dcount ""}} {
    with_test_prefix $name {
	gdb_test "print whatop == ($value)" " = true" "check settings"

	if {$dcount != ""} {
	    gdb_test "print dcount" " = $dcount" "check destructor count"
	}

	# For debugging.
	# gdb_test "print (enum what_operator) whatop" " = .*" \
	#     "debug print whatop"

	# Mildly lame that these end up in the test results.
	gdb_test_no_output "set variable whatop = WHATOP_INVALID" "reset whatop"
	gdb_test_no_output "set variable dcount = 0" "reset dcount"
    }
}

gdb_test "print \$an_int = new int" " = .int .. $hex"
check_op int WHATOP_GLOBAL
gdb_test "print *new int(5)" " = 5"
check_op "int 2" WHATOP_GLOBAL
gdb_test "print *(\$an_int_array = new int\[7\]) @ 7" \
    " = \\\{$decimal, $decimal, $decimal, $decimal, $decimal, $decimal, $decimal\\\}"
check_op "int array" {WHATOP_GLOBAL | WHATOP_ARRAY}

gdb_test "print new int *" " = .int ... $hex"
check_op "int *" WHATOP_GLOBAL

gdb_test "print *new int *\[2\] @ 2" " = \\\{$hex, $hex\\\}"
check_op "int * array" {WHATOP_GLOBAL | WHATOP_ARRAY}

gdb_test "print *(\$another_int_array = new int \[2\]\[3\]) @ 2" " = {\\\{$decimal, $decimal, $decimal}, \\\{$decimal, $decimal, $decimal}}"
check_op "int array 2" {WHATOP_GLOBAL | WHATOP_ARRAY}

gdb_test "print *(\$simple = new Simple)" " = {x = 7}"
check_op "Simple" WHATOP_GLOBAL
gdb_test "print *(\$simple_array = new Simple\[7\]) @ 2" " = {{x = 7}, {x = 7}}"
check_op "Simple array" {WHATOP_GLOBAL | WHATOP_ARRAY}
gdb_test "print *new Simple(23)" " = {x = 23}"
check_op "Simple 2" WHATOP_GLOBAL
gdb_test "print *new Simple \[2\]\[3\] @ 2" \
    " = {{{x = 7}, {x = 7}, {x = 7}}, {{x = 7}, {x = 7}, {x = 7}}}"
check_op "Simple array 2" {WHATOP_GLOBAL | WHATOP_ARRAY}

gdb_test "print *(\$derived = new Derived)" " = {<Simple> = {x = 7}, <No data fields>}"
check_op "Derived" WHATOP_GLOBAL
gdb_test "print *new Derived\[7\] @ 2" " = {{<Simple> = {x = 7}, <No data fields>}, {<Simple> = {x = 7}, <No data fields>}}"
check_op "Derived array" {WHATOP_GLOBAL | WHATOP_ARRAY}

gdb_test "print *new WithConstructor<int>(5)" " = {x = 5}"
check_op "WithConstructor" WHATOP_GLOBAL

gdb_test "print *new Name::InNameSpace<int>(27)" " = {x = 27}"
check_op "InNameSpace" WHATOP_GLOBAL

gdb_test "print *(\$hasops = new HasOps)" " = {x = 7}"
check_op "HasOps" WHATOP_HASOPS
gdb_test "print *new HasOps(23)" " = {x = 23}"
check_op "HasOps 2" WHATOP_HASOPS
gdb_test "print *(\$hasops_array = new HasOps\[7\]) @ 2" " = {{x = 7}, {x = 7}}"
check_op "HasOps array" {WHATOP_HASOPS | WHATOP_ARRAY}

gdb_test "print \$h = (HasOps *) HasOps::operator new (sizeof (HasOps))" \
    " = .HasOps .. $hex"
check_op "HasOps allocation" {WHATOP_HASOPS}
gdb_test "print *new(\$h) HasOps" " = {x = 7}"
check_op "HasOps placement" {WHATOP_HASOPS | WHATOP_PLACEMENT}

gdb_test "print *new (1, 88) HasOps(0)" " = {x = 0}"
check_op "HasOps arguments" {WHATOP_HASOPS | WHATOP_ARGS}

gdb_test "print new HasOps **" " = .HasOps .... $hex"
# This should not use HasOps::operator new.
check_op "HasOps **" WHATOP_GLOBAL

gdb_test "print *(\$global_hasops = ::new HasOps)" " = {x = 7}"
# This should not use HasOps::operator new.
check_op "::new HasOps" WHATOP_GLOBAL

# FIXME
gdb_test "print *new VDerived2" " = .*"
check_op "VDerived2" WHATOP_GLOBAL

gdb_test "print *new decltype(5)(5)" " = 5"
check_op "new decltype" WHATOP_GLOBAL

gdb_test "print delete 0" " = void"
check_op "delete 0" WHATOP_INVALID

gdb_test "print delete (void *) 0" " = void"
check_op "delete 0 again" WHATOP_INVALID

gdb_test "print delete \$an_int" " = void"
check_op "delete int" {WHATOP_GLOBAL | WHATOP_DELETE}

gdb_test "print delete\[\] \$an_int_array" " = void"
check_op "delete int array" {WHATOP_GLOBAL | WHATOP_DELETE | WHATOP_ARRAY}

gdb_test "print delete\[\] \$another_int_array" " = void"
check_op "delete int array 2" {WHATOP_GLOBAL | WHATOP_DELETE | WHATOP_ARRAY}

gdb_test "print delete \$simple" " = void"
check_op "delete Simple" {WHATOP_GLOBAL | WHATOP_DELETE}

gdb_test "print delete\[\] \$simple_array" " = void"
check_op "delete Simple array" \
    {WHATOP_GLOBAL | WHATOP_DELETE | WHATOP_ARRAY} \
    7

gdb_test "print delete \$derived" " = void"
check_op "delete Derived" {WHATOP_GLOBAL | WHATOP_DELETE}

gdb_test "print delete \$hasops" " = void"
check_op "delete HasOps" {WHATOP_HASOPS | WHATOP_DELETE}

gdb_test "print ::delete \$global_hasops" " = void"
check_op "::delete HasOps" {WHATOP_GLOBAL | WHATOP_DELETE}

gdb_test "print delete\[\] \$hasops_array" " = void"
check_op "delete HasOps array" {WHATOP_HASOPS | WHATOP_DELETE | WHATOP_ARRAY}

# Interoperability with the real C++ runtime.
gdb_test "print delete ip" " = void"
check_op "delete int from c++" {WHATOP_GLOBAL | WHATOP_DELETE}

gdb_test "print delete\[\] y2" " = void"
check_op "delete int * array from c++" \
    {WHATOP_GLOBAL | WHATOP_DELETE | WHATOP_ARRAY}

gdb_test "print delete s" " = void"
check_op "delete Simple from c++" {WHATOP_GLOBAL | WHATOP_DELETE}

gdb_test "print delete\[\] s3" " = void"
check_op "delete Simple array from c++" \
    {WHATOP_GLOBAL | WHATOP_DELETE | WHATOP_ARRAY}

gdb_test "print delete b" " = void"
check_op "delete Derived from c++ via base pointer" \
    {WHATOP_BASE | WHATOP_DELETE}
